//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

package train_topology;
import inet.networklayer.configurator.ipv4.Ipv4NetworkConfigurator;
import inet.networklayer.ipv4.RoutingTableRecorder;
import simu5g.common.binder.Binder;
import simu5g.world.radio.LteChannelControl;
import simu5g.common.carrierAggregation.CarrierAggregation;
import simu5g.nodes.Upf;
import simu5g.nodes.NR.gNodeB;
import simu5g.nodes.NR.NRUe;
import inet.node.tsn.*;
import inet.node.ethernet.*;
import inet.node.inet.Router;
import inet.node.inet.StandardHost;
import inet.networks.base.TsnNetworkBase;
import *;
network TrainTopology
{
    parameters:
        // kong tiao
        int numHVAC = 4;
        int numFAS = 4;
        int numPIS = 4;
        // qian yin
        int numTCU = 4;
        // zhi dong
        int numBCU = 4;
        **.eth[*].bitrate = default(100Mbps);

    //        @display("bgi=background/train;bgb=4315.567,1647.9696");
    submodules:
        carrierAggregation: CarrierAggregation {
            @display("p=100,27;is=s");
        }
        channelControl: LteChannelControl {
            @display("p=196,27;is=s");
        }
        configurator: Ipv4NetworkConfigurator {
            parameters:
                @display("p=100,300;is=s");
        }
        routingRecorder: RoutingTableRecorder {
            @display("p=176,88;is=s");
        }
        binder: Binder {
            @display("p=176,200;is=s");
        }
        server: TsnDevice {
            @display("p=1573,19");
        }
        switch1: TsnSwitch {
            @display("p=572.91,256.88");
        }
        switch2: TsnSwitch {
            @display("p=1423.5,297.69998");
        }
        switch3: TsnSwitch {
            @display("p=1901.25,297.44");
        }

        upf1: MyUpf {
            @display("p=625.3,339.69;is=s");
        }
        upf2: MyUpf {
            @display("p=1331.2,399.1;is=s");
        }
        upf3: MyUpf {
            @display("p=1901.25,387.00998;is=s");
        }
        upf4: MyUpf {
            @display("p=2450.5,399.1;is=s");
        }
        gnb1: gNodeB {
            gateway = "upf1";
            @display("p=794.3,560.3");
        }

        gnb2: gNodeB {
            gateway = "upf2";
            @display("p=1400.1,599.3");
        }
        gnb3: gNodeB {
            gateway = "upf3";
            @display("p=1900.6,471.9");
        }
        gnb4: gNodeB {
            gateway = "upf4";
            @display("p=2451,473");
        }
        HVACClient[numHVAC]: TsnDevice {

            @display("i=device/card;p=350,600,r,600;is=s;");
        }
        HVACUe[numHVAC]: TsnUe {
            @display("i=device/card;p=350,600,r,600;is=s;");
        }
        //        FASClient[numFAS]: TsnDevice {
        //            @display("i=device/card;p=350,700,r,600;is=s;");
        //        }
        //        FASUe[numFAS]: TsnUe {
        //            @display("i=device/card;p=350,700,r,600;is=s;");
        //        }
        TCUClient[numTCU]: TsnDevice {
            @display("i=device/card;p=450,400,r,600;is=s;");
        }
        TCUUe[numTCU]: TsnUe {
            @display("i=device/card;p=450,400,r,600;is=s;");
        }
        BCUClient[numBCU]: TsnDevice {
            @display("i=device/device;p=450,500,r,600;is=s;");
        }
        BCUUe[numBCU]: TsnUe {
            @display("i=device/device;p=450,500,r,600;is=s;");
        }

    connections:
        for i=0..numHVAC-1 {
            HVACClient[i].ethg++ <--> Eth100M <--> HVACUe[i].phys;
        }
        //        for i=0..numFAS-1 {
        //            FASClient[i].ethg++ <--> Eth100M <--> FASUe[i].phys;
        //        }
        //
        for i=0..numTCU-1 {
            TCUClient[i].ethg++ <--> Eth100M <--> TCUUe[i].phys;
        }
        for i=0..numBCU-1 {
            BCUClient[i].ethg++ <--> Eth100M <--> BCUUe[i].phys;
        }

        switch1.ethg++ <--> Eth100M <--> upf1.filterGate;
        switch2.ethg++ <--> Eth100M <--> upf2.filterGate;
        switch1.ethg++ <--> Eth100M <--> switch3.ethg++
        switch2.ethg++ <--> Eth100M <--> switch3.ethg++
//        switch1.ethg++ <--> Eth100M <--> upf2.filterGate;

        //# X2 connections
        //        gnb1.x2++ <--> Eth100M <--> gnb2.x2++;
        //        gnb3.x2++ <--> Eth100M <--> gnb4.x2++;
        gnb1.ppp <--> Eth100M <--> upf1.pppg++;
        gnb2.ppp <--> Eth100M <--> upf2.pppg++;
        gnb3.ppp <--> Eth100M <--> upf3.pppg++;
        gnb4.ppp <--> Eth100M <--> upf4.pppg++;
        //        gnb3.ppp <--> Eth100M <--> upf2.pppg++;
        //        gnb4.ppp <--> Eth100M <--> upf2.pppg++;
        switch7.ethg++ <--> Eth100M <--> server.ethg++;

}
