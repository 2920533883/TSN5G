#include <omnetpp.h>
#include <string.h>
#include "inet/linklayer/ethernet/basic/EthernetEncapsulation.h"
#include "inet/linklayer/ethernet/basic/EthernetMac.h"
#include "inet/common/TagBase.h"
#include "inet/physicallayer/wired/ethernet/EthernetPhyHeader_m.h"
#include "inet/linklayer/ieee8021q/Ieee8021qTagHeader_m.h"
#include "inet/transportlayer/udp/UdpHeader_m.h"
#include <inet/transportlayer/contract/udp/UdpSocket.h>
#include <inet/networklayer/common/L3AddressResolver.h>
#include "inet/networklayer/ipv4/Ipv4Header_m.h"
#include "inet/linklayer/common/InterfaceTag_m.h"
#include "inet/networklayer/common/DscpTag_m.h"
#include "inet/networklayer/common/EcnTag_m.h"
#include "inet/networklayer/arp/ipv4/GlobalArp.h"
#include "inet/networklayer/common/MyTag.h"
#include "inet/linklayer/ppp/PppFrame_m.h"
#include "inet/networklayer/common/TosTag_m.h"
#include "inet/networklayer/common/L3AddressTag_m.h"
#include "inet/networklayer/common/HopLimitTag_m.h"
using namespace inet;
using namespace omnetpp;
using namespace std;
class MyNWTT : public cSimpleModule{

        virtual void initialize() override;
        virtual void handleMessage(cMessage *msg) override;

};
Define_Module(MyNWTT);
void MyNWTT::initialize()
{


}


void MyNWTT::handleMessage(cMessage *msg)
{

    if (strcmp(msg->getArrivalGate()->getName(),"in") == 0){
        Packet *pkt = check_and_cast<Packet *>(msg);
        pkt->eraseAtFront(B(28));
        pkt->trim();
        pkt->removeTagIfPresent<PacketProtocolTag>();
        pkt->removeTagIfPresent<InterfaceInd>();
        pkt->removeTagIfPresent<DispatchProtocolReq>();
        auto eph = pkt->popAtFront<EthernetPhyHeader>();
        auto emh = pkt->popAtFront<EthernetMacHeader>();
        // TSN
        // auto iteh = pkt->popAtFront<Ieee8021qTagEpdHeader>();
        auto iph = pkt->popAtFront<Ipv4Header>();
        // get destAddress
        auto a = iph->getTag<MyTag>();
        const MacAddress& new_mac = a->destAddress;
        const auto& new_emh = makeShared<EthernetMacHeader>();
        new_emh->setChunkLength(emh->getChunkLength());
        new_emh->setSrc(emh->getSrc());
        new_emh->setDest(new_mac);
        new_emh->setTypeOrLength(emh->getTypeOrLength());
        pkt->insertAtFront(iph);
//            pkt->insertAtFront(iteh);
        pkt->insertAtFront(new_emh);
        pkt->insertAtFront(eph);
        pkt->addTagIfAbsent<PacketProtocolTag>()->setProtocol(&Protocol::ethernetPhy);
        Signal *signal = new Signal(msg->getFullName(), msg->getKind(), pkt->getBitLength());
        signal->encapsulate(pkt);
        cGate *physOutGate = gate("phys$o");
        cChannel *datarateChannel = physOutGate->getTransmissionChannel();
        while (datarateChanel->isBusy());
        send(signal, "phys$o");
    }
    else {

    }


}
