//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

package train_topology;
import inet.networklayer.configurator.ipv4.Ipv4NetworkConfigurator;
import inet.networklayer.ipv4.RoutingTableRecorder;
import simu5g.common.binder.Binder;
import simu5g.world.radio.LteChannelControl;
import simu5g.common.carrierAggregation.CarrierAggregation;
import simu5g.nodes.Upf;
import simu5g.nodes.NR.gNodeB;
import simu5g.nodes.NR.NRUe;
import inet.node.tsn.*;
import inet.node.ethernet.*;
import inet.node.inet.Router;
import inet.node.inet.StandardHost;
import inet.networks.base.TsnNetworkBase;
import *;
network TrainTopology
{
    parameters:
        // kong tiao
        int numHVAC = 8;
        // men kong
        int numDCU = 8;
        // dianchi
        int numBC = 8;
        // che xiang
        int numPIS = 8;
        // qian yin
        int numTCU = 8;
        // zhi dong
        int numBCU = 8;
        **.eth[*].bitrate = default(100Mbps);

    //        @display("bgi=background/train;bgb=4315.567,1647.9696");
    submodules:
        carrierAggregation: CarrierAggregation {
            @display("p=100,27;is=s");
        }
        channelControl: LteChannelControl {
            @display("p=196,27;is=s");
        }
        configurator: Ipv4NetworkConfigurator {
            parameters:
                @display("p=100,300;is=s");
        }
        routingRecorder: RoutingTableRecorder {
            @display("p=176,88;is=s");
        }
        binder: Binder {
            @display("p=176,200;is=s");
        }
        server: TsnDevice {
            @display("p=449.53998,104.78");
        }
        switch1: TsnSwitch {
            @display("p=1007.24,177.45");
        }
        switch2: TsnSwitch {
            @display("p=2007.72,221.39");
        }
        switch3: TsnSwitch {
            @display("p=1480.44,103.09");
        }

        upf1: MyUpf {
            @display("p=880.49,282.22998;is=s");
        }
        upf2: MyUpf {
            @display("p=2007.72,361.66;is=s");
        }

        gnb1: gNodeB {
            gateway = "upf1";
            @display("p=673.39996,465.4");
        }

        gnb2: gNodeB {
            gateway = "upf1";
            @display("p=1098.5,464.75");
        }
        gnb3: gNodeB {
            gateway = "upf2";
            @display("p=1627.47,449.53998");
        }
        gnb4: gNodeB {
            gateway = "upf2";
            @display("p=2298.4,478.27");
        }
        HVACClient[numHVAC]: TsnDevice {

            @display("i=device/card;p=450,450,r,300;is=s;");
        }
        HVACUe[numHVAC]: TsnUe {
            @display("i=device/card;p=450,450,r,300;is=s;");
        }
        BCClient[numBC]: TsnDevice {
            @display("i=device/card;p=450,500,r,300;is=s;");
        }
        BCUe[numBC]: TsnUe {
            @display("i=device/card;p=450,500,r,300;is=s;");
        }
        TCUClient[numTCU]: TsnDevice {
            @display("i=device/card;p=450,550,r,300;is=s;");
        }
        TCUUe[numTCU]: TsnUe {
            @display("i=device/card;p=450,550,r,300;is=s;");
        }
        BCUClient[numBCU]: TsnDevice {
            @display("i=device/device;p=450,600,r,300;is=s;");
        }
        BCUUe[numBCU]: TsnUe {
            @display("i=device/device;p=450,600,r,300;is=s;");
        }
        PISClient[numPIS]: TsnDevice {
            @display("i=device/device;p=450,650,r,300;is=s;");
        }
        PISUe[numPIS]: TsnUe {
            @display("i=device/device;p=450,650,r,300;is=s;");
        }
        DCUClient[numDCU]: TsnDevice {
            @display("i=device/device;p=450,700,r,300;is=s;");
        }
        DCUUe[numDCU]: TsnUe {
            @display("i=device/device;p=450,700,r,300;is=s;");
        }
    connections:
        for i=0..numHVAC-1 {
            HVACClient[i].ethg++ <--> Eth100M <--> HVACUe[i].phys;
        }
        for i=0..numBC-1 {
            BCClient[i].ethg++ <--> Eth100M <--> BCUe[i].phys;
        }
        for i=0..numDCU-1 {
            DCUClient[i].ethg++ <--> Eth100M <--> DCUUe[i].phys;
        }
        for i=0..numPIS-1 {
            PISClient[i].ethg++ <--> Eth100M <--> PISUe[i].phys;
        }
        for i=0..numTCU-1 {
            TCUClient[i].ethg++ <--> Eth100M <--> TCUUe[i].phys;
        }
        for i=0..numBCU-1 {
            BCUClient[i].ethg++ <--> Eth100M <--> BCUUe[i].phys;
        }

        switch1.ethg++ <--> Eth100M <--> upf1.filterGate;
        switch2.ethg++ <--> Eth100M <--> upf2.filterGate;
        switch1.ethg++ <--> Eth100M <--> switch3.ethg++;
        switch2.ethg++ <--> Eth100M <--> switch3.ethg++;

        gnb1.ppp <--> Eth100M <--> upf1.pppg++;
        gnb2.ppp <--> Eth100M <--> upf1.pppg++;
        gnb3.ppp <--> Eth100M <--> upf2.pppg++;
        gnb4.ppp <--> Eth100M <--> upf2.pppg++;
        //        gnb3.ppp <--> Eth100M <--> upf2.pppg++;
        //        gnb4.ppp <--> Eth100M <--> upf2.pppg++;
        switch3.ethg++ <--> Eth100M <--> server.ethg++;

}
