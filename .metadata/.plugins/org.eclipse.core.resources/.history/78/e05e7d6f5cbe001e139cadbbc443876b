[General]
network = TrainTopology

*.gnb*.numX2Apps = 1                                        # one x2App per peering node
*.gnb*.x2App[*].server.localPort = 5000 + ancestorIndex(1)  # Server ports (x2App[0]=5000, x2App[1]=5001, ...)
*.gnb1.x2App[0].client.connectAddress = "gnb2%x2ppp0" 
*.gnb2.x2App[0].client.connectAddress = "gnb1%x2ppp0" 
*.server.ipv4.routingTable.routingFile = "server.mrt"
*.*.dstt.destAddress = "server"
*.*Ue[0].masterId = 0
*.*Ue[0].nrMacCellId = 1
*.*Ue[0].nrMasterId = 1
*.*Ue[1].masterId = 0
*.*Ue[1].nrMacCellId = 1
*.*Ue[1].nrMasterId = 1
*.*Ue[2].masterId = 0
*.*Ue[2].nrMacCellId = 1
*.*Ue[2].nrMasterId = 2
*.*Ue[3].masterId = 0
*.*Ue[3].nrMacCellId = 1
*.*Ue[3].nrMasterId = 2
#
#**.dynamicCellAssociation = true
#**.enableHandover = true

*.*Client*.numApps = 2
*.*Client*.app[*].typename = "UdpApp"
*.*Client*.app[0].display-name = "besteffort"
*.*Client*.app[1].display-name = "video"
*.*Client*.app[*].io.destAddress = "server"
*.*Client*.app[0].io.destPort = 1000
*.*Client*.app[1].io.destPort = 1001
*.*Client*.app[0].io.localPort = 1000
*.*Client*.app[1].io.localPort = 1001
*.*Client*.app[0].source.packetLength = 30B
*.*Client*.app[1].source.packetLength = 40B
*.*Client*.app[0].source.productionInterval = 10ms
*.*Client*.app[1].source.productionInterval = 20ms
*.*Client*.app[*].source.initialProductionOffset = uniform(100ms,400ms)

*.server.numApps = 2
*.server.app[*].typename = "UdpEchoApp"
*.server.app[0].display-name = "besteffort"
*.server.app[1].display-name = "video"
*.server.app[0].localPort = 1000
*.server.app[1].localPort = 1001

*.*.hasOutgoingStreams = true
*.*.hasIncomingStreams = true
# client stream identification
*.*Client*.bridging.streamIdentifier.identifier.mapping = [{stream: "besteffort", packetFilter: expr(udp.destPort == 1000)},
															{stream: "video", packetFilter: expr(udp.destPort == 1001)}]

# client stream encoding
*.*Client*.bridging.streamCoder.encoder.mapping = [{stream: "besteffort", pcp: 0},
													{stream: "video", pcp: 4}]

*.server.bridging.streamIdentifier.identifier.mapping = [{stream: "besteffort", packetFilter: expr(udp.destPort == 1000)},
															{stream: "video", packetFilter: expr(udp.destPort == 1001)}]
*.server.bridging.streamCoder.encoder.mapping = [{stream: "besteffort", pcp: 0},
													{stream: "video", pcp: 4}]

# switch stream decoding
*.switch*.bridging.streamCoder.decoder.mapping = [{pcp: 0, stream: "besteffort"},
                                                 {pcp: 4, stream: "video"}]
# switch stream eccoding
*.switch*.bridging.streamCoder.encoder.mapping = [{stream: "besteffort", pcp: 0},
													{stream: "video", pcp: 4}]

*.switch*.hasIngressTrafficFiltering = true
# per-stream filtering for video stream
*.switch*.bridging.streamFilter.ingress.typename = "SimpleIeee8021qFilter"
*.switch*.bridging.streamFilter.ingress.numStreams = 2
*.switch*.bridging.streamFilter.ingress.classifier.mapping = {besteffort: 0, video: 1}
*.switch*.bridging.streamFilter.ingress.*[0].display-name = "besteffort"
*.switch*.bridging.streamFilter.ingress.*[1].display-name = "video"
*.switch*.bridging.streamFilter.ingress.meter[*].typename = "EligibilityTimeMeter"
*.switch*.bridging.streamFilter.ingress.meter[*].committedInformationRate = 20Mbps
*.switch*.bridging.streamFilter.ingress.meter[*].committedBurstSize = 10kB
*.switch*.bridging.streamFilter.ingress.filter[*].typename = "EligibilityTimeFilter"



# enable egress traffic shaping
*.switch*.hasEgressTrafficShaping = true
*.switch*.bridging.directionReverser.reverser.excludeEncapsulationProtocols = ["ieee8021qctag"]
# credit-based and asynchronous traffic shaping
*.switch*.eth[*].macLayer.queue.numTrafficClasses = 2
*.switch*.eth[*].macLayer.queue.*[0].display-name = "besteffort"
*.switch*.eth[*].macLayer.queue.*[1].display-name = "video"
*.switch*.eth[*].macLayer.queue.queue[0].typename = "EligibilityTimeQueue"
*.switch*.eth[*].macLayer.queue.queue[1].typename = "EligibilityTimeQueue"
*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[0].typename = "Ieee8021qAsynchronousShaper"
*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[0].idleSlope = 42.68Mbps
*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[1].typename = "Ieee8021qAsynchronousShaper"
*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[1].idleSlope = 21.34Mbps


